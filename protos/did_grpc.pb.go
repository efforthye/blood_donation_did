// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protos/did.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimpleDid_GetDid_FullMethodName = "/did.SimpleDid/GetDid"
)

// SimpleDidClient is the client API for SimpleDid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleDidClient interface {
	GetDid(ctx context.Context, in *Did, opts ...grpc.CallOption) (*Did, error)
}

type simpleDidClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleDidClient(cc grpc.ClientConnInterface) SimpleDidClient {
	return &simpleDidClient{cc}
}

func (c *simpleDidClient) GetDid(ctx context.Context, in *Did, opts ...grpc.CallOption) (*Did, error) {
	out := new(Did)
	err := c.cc.Invoke(ctx, SimpleDid_GetDid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleDidServer is the server API for SimpleDid service.
// All implementations must embed UnimplementedSimpleDidServer
// for forward compatibility
type SimpleDidServer interface {
	GetDid(context.Context, *Did) (*Did, error)
	mustEmbedUnimplementedSimpleDidServer()
}

// UnimplementedSimpleDidServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleDidServer struct {
}

func (UnimplementedSimpleDidServer) GetDid(context.Context, *Did) (*Did, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDid not implemented")
}
func (UnimplementedSimpleDidServer) mustEmbedUnimplementedSimpleDidServer() {}

// UnsafeSimpleDidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleDidServer will
// result in compilation errors.
type UnsafeSimpleDidServer interface {
	mustEmbedUnimplementedSimpleDidServer()
}

func RegisterSimpleDidServer(s grpc.ServiceRegistrar, srv SimpleDidServer) {
	s.RegisterService(&SimpleDid_ServiceDesc, srv)
}

func _SimpleDid_GetDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Did)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleDidServer).GetDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleDid_GetDid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleDidServer).GetDid(ctx, req.(*Did))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleDid_ServiceDesc is the grpc.ServiceDesc for SimpleDid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleDid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "did.SimpleDid",
	HandlerType: (*SimpleDidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDid",
			Handler:    _SimpleDid_GetDid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/did.proto",
}
